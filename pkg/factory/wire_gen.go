// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package factory

import (
	"context"
	"github.com/danielkrainas/sake/pkg/service"
)

// Injectors from wire.go:

func Coordinator(ctx context.Context, config *service.Config) (service.CoordinatorService, error) {
	hubConnector, err := InitializeHub(ctx, config)
	if err != nil {
		return nil, err
	}
	storageService, err := InitializeStorage(ctx, config)
	if err != nil {
		return nil, err
	}
	cacheService, err := InitializeCache(ctx, config, storageService)
	if err != nil {
		return nil, err
	}
	coordinatorService, err := InitializeCoordinator(ctx, hubConnector, storageService, cacheService)
	if err != nil {
		return nil, err
	}
	return coordinatorService, nil
}

func ComponentManagerWithCoordinator(ctx context.Context, config *service.Config) (*service.ComponentManager, error) {
	hubConnector, err := InitializeHub(ctx, config)
	if err != nil {
		return nil, err
	}
	storageService, err := InitializeStorage(ctx, config)
	if err != nil {
		return nil, err
	}
	cacheService, err := InitializeCache(ctx, config, storageService)
	if err != nil {
		return nil, err
	}
	coordinatorService, err := InitializeCoordinator(ctx, hubConnector, storageService, cacheService)
	if err != nil {
		return nil, err
	}
	mux, err := InitializeAPI()
	if err != nil {
		return nil, err
	}
	server, err := InitializeServer(ctx, config, mux, cacheService, coordinatorService)
	if err != nil {
		return nil, err
	}
	componentManager, err := InitializeComponentManager(ctx, coordinatorService, server)
	if err != nil {
		return nil, err
	}
	return componentManager, nil
}
